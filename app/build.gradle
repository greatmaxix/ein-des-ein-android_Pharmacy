apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.pharmacy.myapp"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "0.1"

        android.applicationVariants.all { variant ->
            variant.outputs.all { output ->
                outputFileName = "${variant.applicationId}-v.${variant.versionName}(${variant.versionCode})-${variant.getName()}.apk"
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/debug.p12")
            storePassword "default_1Android_2Debug_3Key"
            keyAlias "defaultDebug"
            keyPassword "default_1Android_2Debug_3Key"
        }
        release {
            storeFile file("../keystore/debug.p12") // TODO change to release in future
            storePassword "default_1Android_2Debug_3Key"
            keyAlias "defaultDebug"
            keyPassword "default_1Android_2Debug_3Key"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'

            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

buildscript {

    def kotlin = [:]
    kotlin.reflect = "org.jetbrains.kotlin:kotlin-reflect:$rootProject.ext.deps.versions.kotlin"
    kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.ext.deps.versions.kotlin"
    kotlin.coroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.deps.versions.coroutines"
    kotlin.coroutines_android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.deps.versions.coroutines"
    ext.kotlin = kotlin

    def navigation = [:]
    navigation.ui = "androidx.navigation:navigation-ui-ktx:$rootProject.ext.deps.versions.navigation"
    navigation.runtime = "androidx.navigation:navigation-runtime-ktx:$rootProject.ext.deps.versions.navigation"
    navigation.fragment = "androidx.navigation:navigation-fragment-ktx:$rootProject.ext.deps.versions.navigation"
    ext.navigation = navigation

    def koin = [:]
    koin.scope = "org.koin:koin-androidx-scope:$rootProject.ext.deps.versions.koin"
    koin.fragment = "org.koin:koin-androidx-fragment:$rootProject.ext.deps.versions.koin"
    koin.viewmodel = "org.koin:koin-androidx-viewmodel:$rootProject.ext.deps.versions.koin"
    ext.koin = koin

    def flow = [:]
    flow.binding = "io.github.reactivecircus.flowbinding:flowbinding-android:$rootProject.ext.deps.versions.flowbinding"
    ext.flow = flow

    def rest = [:]
    rest.retrofit = "com.squareup.retrofit2:retrofit:$rootProject.ext.deps.versions.retrofit"
    rest.gson = "com.squareup.retrofit2:converter-gson:$rootProject.ext.deps.versions.retrofit"
    rest.okhttp = "com.squareup.okhttp3:okhttp:$rootProject.ext.deps.versions.okhttp"
    rest.logginginterceptor = "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.deps.versions.okhttp"
    ext.rest = rest

    def androidx = [:]
    androidx.core = "androidx.core:core-ktx:$rootProject.ext.deps.versions.core"
    androidx.browser = "androidx.browser:browser:$rootProject.ext.deps.versions.browser"
    androidx.cardview = "androidx.cardview:cardview:$rootProject.ext.deps.versions.card"
    androidx.activity = "androidx.activity:activity-ktx:$rootProject.ext.deps.versions.activity"
    androidx.fragment = "androidx.fragment:fragment-ktx:$rootProject.ext.deps.versions.fragment"
    androidx.appcompat = "androidx.appcompat:appcompat:$rootProject.ext.deps.versions.appcompat"
    androidx.constraintlayout = "androidx.constraintlayout:constraintlayout:$rootProject.ext.deps.versions.constraint"
    androidx.collection = "androidx.collection:collection-ktx:$rootProject.ext.deps.versions.collection"
    androidx.viewpager = "androidx.viewpager2:viewpager2:$rootProject.ext.deps.versions.viewpager"
    androidx.paging = "androidx.paging:paging-runtime-ktx:$rootProject.ext.deps.versions.paging"
    androidx.exifinterface = "androidx.exifinterface:exifinterface:$rootProject.ext.deps.versions.exifinterface"
    ext.androidx = androidx

    def lifecycle = [:]
    lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$rootProject.ext.deps.versions.lifecycle"
    lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$rootProject.ext.deps.versions.lifecycle"
    lifecycle.livedata = "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.ext.deps.versions.lifecycle"
    lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$rootProject.ext.deps.versions.lifecycle"
    lifecycle.viewmodel = "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.ext.deps.versions.lifecycle"
    ext.lifecycle = lifecycle

    def room = [:]
    room.runtime = "androidx.room:room-runtime:$rootProject.ext.deps.versions.room"
    room.compiler = "androidx.room:room-compiler:$rootProject.ext.deps.versions.room"
    room.ktx = "androidx.room:room-ktx:$rootProject.ext.deps.versions.room"
    ext.room = room
}

dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${rootProject.ext.deps.versions.desugaring}"

    flow.each { entry -> implementation("$entry.value") }
    rest.each { entry -> implementation("$entry.value") }
    koin.each { entry -> implementation("$entry.value") }
    kotlin.each { entry -> implementation("$entry.value") }
    androidx.each { entry -> implementation("$entry.value") }
    lifecycle.each { entry -> implementation("$entry.value") }
    navigation.each { entry -> implementation("$entry.value") }

    implementation "org.apache.commons:commons-lang3:$rootProject.ext.deps.versions.apacheCommons" // for Date extensions only
    implementation "com.jakewharton.timber:timber:$rootProject.ext.deps.versions.timber"
    implementation "com.intuit.sdp:sdp-android:$rootProject.ext.deps.versions.sdp"
    implementation "com.intuit.ssp:ssp-android:$rootProject.ext.deps.versions.sdp"
    implementation "com.google.android.material:material:$rootProject.ext.deps.versions.material"
    implementation "com.github.fondesa:kpermissions:$rootProject.ext.deps.versions.kPermissions"
    implementation "com.github.bumptech.glide:glide:$rootProject.ext.deps.versions.glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.ext.deps.versions.glide"
    implementation "androidx.work:work-runtime-ktx:$rootProject.ext.deps.versions.workmanager"
    implementation "com.budiyev.android:code-scanner:$rootProject.ext.deps.versions.qrCodeScanner"
    implementation "com.github.onimur:handle-path-oz:$rootProject.ext.deps.versions.handlePathOz"
    implementation "com.google.android.gms:play-services-maps:$rootProject.ext.deps.versions.maps"

    implementation "$room.runtime"
    implementation "$room.ktx"
    kapt(room.compiler)
}